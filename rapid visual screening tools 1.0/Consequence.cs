using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace rapid_visual_screening_tools_1._0
{
    public partial class frmConsequence : Form
    {

        public frmConsequence()
        {
            InitializeComponent();
        }

        //窗口项目创建
        public const int itemnum = 6;
        const int choicenum = 15;
        const int errornum = 2;
        public static Label[] name = new Label[itemnum];
        public static ComboBox[] choice = new ComboBox[itemnum];
        public static TextBox[,] txt = new TextBox[itemnum, 9];
        public static TextBox[] sumcon = new TextBox[9];
        public static double[] sumcondata = new double[9];
        public static Label[] lblmentary = new Label[itemnum];
        public static ToolTip[] ttp = new ToolTip[itemnum];
        public static Label[] labelerror = new Label[errornum];


        //数据项目输入
        string[] nameitem = new string[itemnum]
        { "1.1 地区类型", "1.2 设计使用人数", "1.3 更换价值",
        "1.4 是否为历史建筑","1.5 功能连续性","1.6 损失影响范围"};
        string[,] choiceitem = new string[itemnum, choicenum]
        {
            { "乡村/郊区","城郊/小工业区","大工业区","城市","密集城市","","","","","","","","","",""},
            { "<200","200-400","400-600","600-800","800-1000","1000-2000","2000-4000","4000-6000","6000-8000","8000-10000","10000-20000","20000-40000","40000-60000","60000-80000","≥80000"},
            {"≤0.2","0.2-0.4","0.4-0.6","0.6-0.8","0.8-1","1-2","2-4","4-6","6-8","8-10","10-20","20-40","40-60","60-80","≥80" },
            {"否","是","","","","","","","","","","","","","" },
            {"很高","高","中等","低","很低","","","","","","","","","","" },
            {"当地小范围","所在州","所在区域","所在国家","国际性","","","","","","","","","","" },
        };
        public static double[,,] numitem = new double[itemnum, 9, choicenum]
        {
            { { 0.06, 0.46,0.53,0.58,0.63,0,0,0,0,0,0,0,0,0,0 },
              { 0.04, 0.32,0.37,0.4,0.43,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
              { 0.04, 0.32,0.37,0.4,0.43,0,0,0,0,0,0,0,0,0,0 },
              { 0.04, 0.32,0.37,0.4,0.43,0,0,0,0,0,0,0,0,0,0 },
              { 0.04, 0.32,0.37,0.4,0.43,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
            },
            { { 0.25, 1.21,1.52,1.74,1.92,1.98,2.09,2.19,2.28,2.37,2.41,2.44,2.46,2.48,2.50 },
              { 0.17, 0.64,1.06,1.21,1.33,1.38,1.46,1.53,1.59,1.65,1.68,1.69,1.71,1.72,1.74 },
              { 0.33, 1.61,2.03,2.32,2.55,2.65,2.79,2.92,3.05,3.16,3.22,3.25,3.28,3.31,3.33 },
              { 0.17, 0.84,1.06,1.21,1.33,1.38,1.46,1.53,1.59,1.65,1.66,1.69,1.71,1.72,1.74 },
              { 0.17, 0.84,1.06,1.21,1.33,1.38,1.46,1.53,1.59,1.65,1.66,1.69,1.71,1.72,1.74 },
              { 0.17, 0.84,1.06,1.21,1.33,1.38,1.46,1.53,1.59,1.65,1.66,1.69,1.71,1.72,1.74 },
              { 0.33, 1.61,2.03,2.32,2.55,2.65,2.79,2.92, 3.05, 3.16, 3.22, 3.25, 3.28,3.31,3.33 },
              { 0.33, 1.61,2.03,2.32,2.55,2.65,2.79,2.92, 3.05, 3.16, 3.22, 3.25, 3.28,3.31,3.33 },
              { 0.33, 1.61,2.03,2.32,2.55,2.65,2.79,2.92, 3.05, 3.16, 3.22, 3.25, 3.28,3.31,3.33 },
            },
            { { 0.13, 0.60,0.76,0.87,0.96,0.99,1.05,1.10,1.14,1.18,1.21,1.22,1.23,1.24,1.25 },
              { 0.13, 0.63,1.79,0.91,1.00,1.04,1.09,1.14,1.19,1.24,1.26,1.27,1.28,1.29,1.30 },
              { 0.08, 0.40,0.51,0.58,0.64,0.66,0.70,0.73,0.76,0.79,0.80,0.81,0.82,0.83,0.83 },
              { 0.13, 0.63,0.79,0.91,1.00,1.04,1.09,1.14,1.19,1.24,1.26,1.27,1.28,1.29,1.30 },
              { 0.13, 0.63,0.79,0.91,1.00,1.04,1.09,1.14,1.19,1.24,1.26,1.27,1.28,1.29,1.30 },
              { 0.13, 0.63,0.79,0.91,1.00,1.04,1.09,1.14,1.19,1.24,1.26,1.27,1.28,1.29,1.30 },
              { 0.08, 0.40,0.51,0.58,0.64,0.66,0.70,0.73,0.76,0.79,0.80,0.81,0.82,0.83,0.83 },
              { 0.08, 0.40,0.51,0.58,0.64,0.66,0.70,0.73,0.76,0.79,0.80,0.81,0.82,0.83,0.83 },
              { 0.08, 0.40,0.51,0.58,0.64,0.66,0.70,0.73,0.76,0.79,0.80,0.81,0.82,0.83,0.83 },
            },
            { { 0.25, 2.50,0,0,0,0,0,0,0,0,0,0,0,0,0 },
              { 0.04, 0.43,0,0,0,0,0,0,0,0,0,0,0,0,0 },
              { 0.08, 0.83,0,0,0,0,0,0,0,0,0,0,0,0,0 },
              { 0.04, 0.43,0,0,0,0,0,0,0,0,0,0,0,0,0 },
              { 0.04, 0.43,0,0,0,0,0,0,0,0,0,0,0,0,0 },
              { 0.04, 0.43,0,0,0,0,0,0,0,0,0,0,0,0,0 },
              { 0.08, 0.83,0,0,0,0,0,0,0,0,0,0,0,0,0 },
              { 0.08, 0.83,0,0,0,0,0,0,0,0,0,0,0,0,0 },
              { 0.08, 0.83,0,0,0,0,0,0,0,0,0,0,0,0,0 }
            },
            { { 0.13, 0.92,1.05,1.16,1.25,0,0,0,0,0,0,0,0,0,0 },
              { 0.09, 0.64,0.73,0.81,0.87,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
              { 0.09, 0.64,0.73,0.81,0.87,0,0,0,0,0,0,0,0,0,0 },
              { 0.09, 0.64,0.73,0.81,0.87,0,0,0,0,0,0,0,0,0,0 },
              { 0.09, 0.64,0.73,0.81,0.87,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 }
            },
            { { 0.19, 1.38,1.58,1.74,1.88,0,0,0,0,0,0,0,0,0,0 },
              { 0.52, 3.84,4.40,4.84,5.22,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
              { 0.52, 3.84,4.40,4.84,5.22,0,0,0,0,0,0,0,0,0,0 },
              { 0.52, 3.84,4.40,4.84,5.22,0,0,0,0,0,0,0,0,0,0 },
              { 0.52, 3.84,4.40,4.84,5.22,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 },
              { 0.17, 1.23,1.41,1.55,1.67,0,0,0,0,0,0,0,0,0,0 }
            }
        };
        string[] mentaryitem = new string[itemnum]
        {
            "建筑物周围区域的总体人口密度和土地适用情况",
            "使用人数，与建筑信息页一致（单位：人）",
            "当前市场建筑成本×建筑总面积，与建筑信息页一致（单位：亿元）",
            "是否为历史建筑",
            "功能连续性的目的是让一个建筑在灾难发生后继续运作",
            "后果的影响范围"
        };

        private void check_intdata(ComboBox[] choice, Label labelerror)
        {
            int standard = int.Parse(frmInformation.check_text[8]);
            int sample = choice[1].SelectedIndex;
            int[] library = new int[15]
            {
                0,200,400,600,800,1000,2000,4000,6000,8000,10000,20000,40000,60000,80000
            };
            int i;
            for(i =0;i<14;i++)
            {
                if ((standard >= library[i] && standard <= library[i + 1]) || (standard >= library[14]))
                {
                    if (sample == i)
                        labelerror.Text = "";
                    else
                        labelerror.Text = "!";
                }
            }
        }

        private void check_doubledata(ComboBox[] choice, Label labelerror)
        {
            double standard = double.Parse(frmInformation.check_text[13]);
            int sample = choice[2].SelectedIndex;
            double[] library = new double[15]
            {
                0,0.2,0.4,0.6,0.8,1,2,4,6,8,10,20,40,60,80
            };
            int i;
            for (i = 0; i < 14; i++)
            {
                if ((standard >= library[i] && standard < library[i + 1]) || (standard >= library[14])) 
                {
                    if (sample == i)
                        labelerror.Text = "";
                    else
                        labelerror.Text = "!";
                }
            }
        }


        private void frmConsequence_Load(object sender, EventArgs e)
        {
            Function.Load(this, itemnum, choicenum, name, nameitem, lblmentary, ttp, mentaryitem, choice, choiceitem, txt, sumcon);
            for (int i = 0; i < errornum; i++)
                labelerror[i] = new Label();
            labelerror[0].Top = 135;
            labelerror[0].Left = 315;
            labelerror[0].Height = 20;
            labelerror[0].ForeColor = Color.Red;
            labelerror[1].Top = 165;
            labelerror[1].Left = 315;
            labelerror[1].Height = 20;
            labelerror[1].ForeColor = Color.Red;
            for(int i =0;i< errornum;i++)
                this.Controls.Add(labelerror[i]);
        }

        private void btnOK_Click(object sender, EventArgs e)
        {
            Function.OK(txt, sumcon, choice, numitem, itemnum, sumcondata);
            check_intdata(choice, labelerror[0]);
            check_doubledata(choice, labelerror[1]);
        }



    }
}
